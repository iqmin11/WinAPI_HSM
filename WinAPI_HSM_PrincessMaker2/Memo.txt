
wcex.style = CS_HREDRAW | CS_VREDRAW; // WNDCLASS 스타일 지정
CS_VREDRAW : 윈도우 창의 세로크기 변경시 윈도우를 다시 그린다.
CS_HREDRAW : 윈도우 창의 가로크기 변경시 윈도우를 다시 그린다.
CS_DBLCLKS : 마우스 더블클릭 버튼 활성화
CS_OWNDC : 윈도우가 하나의 DC(출력에 필요한 모든 정보를 가지는 데이터 구조체)를 독점적으로 사용한다
CS_CLASSDC : DC를 공유한다
CS_PARENTDC : 자식윈도우가 부모윈도우의 DC를 사용한다
CS_NOCLOSE : 닫기 메세지 전달 불가.
CS_SAVEBITS : 화면영역을 비트맵으로 저장한다






    wcex.lpfnWndProc = MessageFunction; // 
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = _hInstance;
    // 넣어주지 않으면 윈도우 기본Icon이 됩니다.
    wcex.hIcon = nullptr;//LoadIcon(_hInstance, MAKEINTRESOURCE(IDI_WINDOWSPROJECT1));
    wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1); // 흰색 
    wcex.lpszMenuName = nullptr;//MAKEINTRESOURCEW(IDC_WINDOWSPROJECT1);
    wcex.lpszClassName = "GameEngineWindowDefault";
    wcex.hIconSm = nullptr;//LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    // 윈도우에게 이런 내용을 window클래스를 GameEngineWindowDefault라는 이름으로 등록해줘.
    // 나중에 윈도우 만들때 쓸꺼냐.
    if (0 == RegisterClassEx(&wcex))
    {
        MsgAssert("윈도우 클래스 등록에 실패했습니다.");
        return;
    }

    // hInst = hInstance; // 인스턴스 핸들을 전역 변수에 저장합니다.

    // 1000번 프로그램이 윈도우를 띄워달라고 요청했다.
    // 윈도우는 다시 특정 숫자이라는 윈도우가 만들어졌다고 우리에게 알려주는데.
    // 특정 숫자로 인식되는 우리의 윈도우에게 크기변경 떠라

    // (WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX)

    HWnd = CreateWindow("GameEngineWindowDefault", _TitleName.data(), WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, _hInstance, nullptr);

    if (!HWnd)
    {
        MsgAssert("윈도우 클래스 생성에 실패했습니다.");
        return;
    }

    DrawHdc = GetDC(HWnd);

    ShowWindow(HWnd, SW_SHOW);
    UpdateWindow(HWnd);

    SettingWindowSize(_Size);
    SettingWindowPos(_Pos);

    return;
}



메뉴 프레임 이미지 그리기.
베이스 이미지는 4*4pixel tile이 12*12로 있는
48*48 pixel image
3*3으로 잘라 사용

크기는 픽셀단위로 조정하되, 4로 나누어떨어지지 않으면 생성하지 못하도록 설정을 해야할 듯 함.
위치값은 가운데 값으로 통일하기로했으니 그렇게 해야할듯.

벡터로 생성하여 크기 조정이 가능한 이미지로 생성
메뉴 객체는 내가 직접 생성해주는게 아니라
크리에이터와 클리어 함수를 만들어서 필요할때 만들어야 할듯함.
예를들어 타이틀화면이 생성될때 직접 객체를 생성해주는게아니라, 타이틀화면이 직접 클리어함수를 로드해야하는것이지.

일단 생각만해놓자.

이미지 자르기구현 고고



GameEngineKey
else if (true == press) 프레스 조건 이게 맞음

Up은
Up true, free true 이게 맞음

Up true, free false 이거면
가정: 1프레임 단위로 Up Down 반복 →
첫프레임. 키 입력O Down 및 Press true /
둘프레임. 키 입력X  Up true Free false /
셋 프레임. 키 입력O 로직에 안걸림 그대로 탈출 /
넷프레임. 키 입력X false false false true가 되겠네 /
다섯번째 프레임. Down이 되겠네
문제는 세번쨰 프레임때 입력이 씹혔다는것

GameEngineObject Isdeath 함수 &&에서 ||으로 바꾸기
float4 -단항연산자 만들어줘

달력 몇년도 몇월을 넣으면 그 해당 달의 달력 만들어줘

해야될 일들


1. RPG에서 맵넣고 움직이게 하는거, 카메라, 충돌 구현도 해보기
1-1. 일단 되면 타일맵으로 움직이게 해보자
2. TextOut에 대해서 알아보고 해보기

게임엔진레벨에 겟 액터스 추가
게임엔진렌더에 셋 무브 추가

openinglevel에서 필요한 액터 정리
컷신(적절한 타이밍에 렌더를 바꾸는식으로 설계)
타이틀로고(단순 랜더, 나타날떄 효과같은게 있으면 좋을듯)
머그샷 <-Base단계에서 설계되어야 할 듯함
대화창(머그샷과 메뉴프레임, 텍스트아웃으로 구성, 보여야할 대화창들을 관리)

오늘 알게된거.. 레벨에서 액터를 쓰고싶으면 크리에이트 엑터를 할떄 받아서 써라;;; 
일단 FirstSetActor 놔두자 ... 건들기 골치아파 위처럼 받아쓰면 더 쉽게 만들 수 있었을것같다.
특정레벨의 Actor를 FSM으로 만들고 싶었어서 필요했었습니다... 
이쪽은 먼저 수정을 하자 이건 좀 아닌듯

lerp는 나중에 게이지 채우는 애니메이션 등을 만들때 사용할 수 있을 것 같음

꽃리소스 존나 더럽다, 다시 편집하쟈


Opening 생각
오프닝 컷신을 진행하는데 200초가 걸린다고 해보자
그럼 스크롤 크레딧 20초, 등등 있을텐데
게임엔진레벨에서 시간을 만들어서 측정하고
해당하는 시간을 범위로 만들어서
0~20초는 크레딧 액터, 20~40초는 컷신1 등 이런식으로 쭉 배치하여
해당 구간마다 특정 컷신과 액터가 작동하도록 만드는 방식으로 만들면
가능할 것 같아

이미지 클리어에 있는 하얀색 네모상자 테두리 없었으면 좋겠다 아니다 걍 하얀색 이미지 넣자 랙탱귤만들어버리자

firstset에서 달력 액터에는 마우스와 충돌할 충돌체들의 배열과, 해당 충돌체마다 반응할 렌더의 배열, 그리고 클릭했을때 입력될 날짜의 배열도 포함되어야함.

크리에이터 렌더때 이미지를 추가했을때 셋스케일을 안해줘도 렌더 스케일에 이미지 크기를 셋해줬으면 좋겠다 
선생님 지금 CreatRender함수는 SetScale을 해주지 않으면 디폴트 RenderScale이 0인데, 이미지를 넣어주면 그 이미지의 스케일로 Render의 스케일을 Set해주도록 해주실수 있나요??
이유 1. 어차피 이미지 크기를 원본 그대로 씀
이유 2. SetRenderScale을 안했을때 경고가 안떠서 크기를 설정 안할걸 모를 수 도 있음.

마우스 충돌과 관련된 기능들이 필요

메뉴프레임을 9개의 렌더 파츠로 관리

액터를 만들고 세팅하는 과정을 동일한 프로세스로 정리할 필요가 있음
특히 셀렉션메뉴 등 메뉴프레임을 이용한 액터의 생성에서 정리가 필요함 꼭 확인할것
나이 등 수치와 관련한 능력치등은 모두 한계치를 생각하면서 만들어야함
나중에 예외처리할수있도록

윈도우에서 지원해주는 HDC를 이용해서 그림을 그리는데,,, 그 그림을 렌더러로 바꾸는 방법이 필요해
마치 GameEngineImage를 Render로 관리하는것처럼...

랜더를 구성하는 순서
AgeRender[i] = CreateRender ->랜더를 만들고
AgeRender[i]->SetScale -> 크기를 정하고
AgeRender[i]->SetFrame -> 프레임을 정하고(잘려있다면)
AgeRender[i]->SetPosition -> 위치를 정한다

셀렉션 액터를 구성하는 순서를 정하자
AcTitleSelectionMenu = CreateActor<SelectionMenu> -> 액터를 만들고
AcTitleSelectionMenu->SetScale -> 크기를 정하고

AcTitleSelectionMenu->SetSelection -> 선택지 개수를 정하고
AcTitleSelectionMenu->SetSelection -> 선택지에 들어갈 TextOut렌더를... 근데 얘네 둘은 합쳐져야댐

AcTitleSelectionMenu->SetPos -> 위치를 정하면 완성

NumberRenderObj -> 정렬에 Negative 이미지 없으면 Negative 로직 건너뛰기 추가

GetButtonState 기능 추가

GameEngineObject On Off, OnOffSwitch virtual로... On Off업캐스트 하고싶어서
구체적으로 안에서 다른 액터들도 끄고 키는 기능을 만들고싶어서
구체적으로 버튼을 가지고있는 액터들 떄문에

Button 클래스 수정
ButtonState GetState() const
	{
		return State;
	}

	int GetHoverIndex() const
	{
		return HoverIndex;
	}

	int GetReleaseIndex() const
	{
		return ReleaseIndex;
	}

	int GetPressIndex() const
	{
		return PressIndex;
	}

    void SetCollisionOrder(int _Order)
	{
		ButtonCollision->SetOrder(_Order);
	}

	


    
NumberRenderObject수정    
    void On() override;
	void Off() override;

  SetTextAlign(hdc, static_cast<UINT>(Align)); 삭제

  enum class TextAlign
{
	Left = DT_LEFT,
	Right = DT_RIGHT,
	Center = DT_CENTER
}; 이걸로 수정 (DrawText용)

DrawTextA(GameEngineWindow::GetDoubleBufferImage()->GetImageDC(), RenderText.c_str(), static_cast<int>(RenderText.size()), &Rect, static_cast<UINT>(Align));

디폴트 세팅 만들기

해야할일

static SetWeekDay 만들기(현재 위크데이 수정) -> GetWeekDay가 있나??? 있으면 그냥 지우고 인자없는버전 만들기
SetWeekDay() 만들기(인자없는버전)
GetNextDate 만들기
그걸위해 operater++ 만들기
그걸로 ScheduleCalendar 수정하기 (다음날짜부터 나오게)

다하면
대화창 따라라라라나오게 만들기
버튼도 추가하는데 사실 말만 버튼 그냥 밙짝반짝 애니메이션 랜더임

다하면 인터페이스 나머지 다 만들자


대화창의 인터페이스를..

SetText를 하고
함수하나 더 넣으면 Set되어있는 Text를 DeltaTime에 따라서 Update
RenderText라는걸 따로 두고. RenderText가 SetText한 Text랑 다르면 처음부터 업데이트하도록 만들어보자

스케줄에 관한 고찰.
달력에 스케줄을 한번에 10개씩 넣어주는걸 최소단위라고 생각하지말자
일단 최소단위는 달력의 하루. 즉 한칸에 스케줄의 정보를 담는것. 그것부터 시작하자 클래스를 만들던 뭘하던 오늘은 여기까지하고 집가자..

미술을 누르면 하루가 간다 부터 구현해보자.
